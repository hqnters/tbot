import telebot
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = '7456446798:AAGw6DVZWwgVJT-u-6cDCrFfvaZ8HlGm5YE' 
bot = telebot.TeleBot(TOKEN)

STICKER_PATH = 'AnimatedSticker.tgs'
STICKER_PATH1 = 'AnimatedSticker1.tgs'

@bot.message_handler(commands=['start'])

def send_welcome(message):
    
    with open(STICKER_PATH, 'rb') as sticker:
            bot.send_document(message.chat.id, sticker)
    bot.reply_to(message, f"–°”ô–ª–µ–º, {message.from_user.first_name}! —Ñ–∞–π–ª–¥—ã –∞–ª—É “Ø—à—ñ–Ω /getfile, –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑.")
    

@bot.message_handler(commands=['help'])
def main(message):
    bot.send_message(message.chat.id, '<b>Help information:</b>\n –§–∞–π–ª –∞–ª—É “Ø—à—ñ–Ω /getfile\n ', parse_mode='html' )

@bot.message_handler(commands=['showmembers'])
def showmemb(message):
    markup = InlineKeyboardMarkup()
    member1= InlineKeyboardButton('Tilek Aisha', callback_data='member1')
    member2= InlineKeyboardButton('Temirkhan_Yerazamat', callback_data='member2')
    markup.row(member1)
    markup.row(member2)
    bot.send_message(message.chat.id, "–°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä: ", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda call: call.data in ['member1','member2'])
def send_members_inf(call):
    if call.data == 'member1':
        bot.send_message(call.message.chat.id, "member1 info")
    elif call.data == 'member2':
        bot.send_message(call.message.chat.id, "member2 info")
    return
    
@bot.message_handler(commands=['temirkhanyerazamat'])
def frog(message):
    bot.send_message(message.chat.id, 'GitHub: hqnters')

@bot.message_handler(commands=['tilekaisha'])
def git(message):
    bot.send_message(message.chat.id, 'ayshatilek')

@bot.message_handler(commands=['getfile'])
def send_file_buttons(message):
    markup = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton("PowerPoint.pptx", callback_data='file1')
    btn2 = InlineKeyboardButton("Word.docx", callback_data='file2')
    btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
    markup.add(btn1, btn2)
    markup.add(btn_back)
    with open(STICKER_PATH1, 'rb') as sticker:
            bot.send_document(message.chat.id, sticker)
    bot.send_message(message.chat.id, "–ñ–∞–∑–¥—ã—Ä—Ç—É –∫–µ—Ä–µ–∫ —Ñ–∞–π–ª–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(message.chat.id, lambda msg: delete_message(msg.chat.id, sent_message.message_id, sent_sticker))

@bot.callback_query_handler(func=lambda call: call.data in ['file1', 'file2', 'back'])
def send_selected_file(call):
    if call.data == 'back':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if os.path.exists(STICKER_PATH1):
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)  
        bot.send_message(call.message.chat.id, "“ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ –º–µ? /getfile –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑")
        return
    
    file_paths = {
        'file1': 'example.txt',
        'file2': 'example.txt'
    }
    file_path = file_paths.get(call.data)
    if file_path and os.path.exists(file_path):
        with open(file_path, 'rb') as file:
            bot.send_document(call.message.chat.id, file)

def delete_message(chat_id, message_id, sticker_message=None):
    bot.delete_message(chat_id, message_id)
    if sticker_message:
        bot.delete_message(chat_id, sticker_message.message_id)

@bot.message_handler()
def interact(message):
    text = message.text.lower()
    
    if text == '“õ–∞–ª–∞–π—Å—ã“£?':
        bot.reply_to(message, "–ñ–∞“õ—Å—ã. ”®–∑—ñ“£—ñ–∑?")
    elif text == 'hello':
        bot.reply_to(message, f"Hello, {message.from_user.first_name}!")
    elif text == '—Å”ô–ª–µ–º':
        bot.reply_to(message, f"–°”ô–ª–µ–º, {message.from_user.first_name}!")
    elif text == '–ø—Ä–∏–≤–µ—Ç':
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")
    elif text == '–Ω–µ —ñ—Å—Ç–µ–ø –∂–∞—Ç—ã—Ä—Å—ã“£?':
        bot.reply_to(message, "–°—ñ–∑–±–µ–Ω —Å”©–π–ª–µ—Å—ñ–ø –æ—Ç—ã—Ä–º—ã–Ω üòä")
    elif text == '—Ä–∞—Ö–º–µ—Ç':
        bot.reply_to(message, "–û“õ–∞—Å—ã –∂–æ“õ! üòä")
    elif text == '—Å–µ–Ω –∫—ñ–º—Å—ñ“£?':
        bot.reply_to(message, "–ú–µ–Ω Telegram –±–æ—Ç—ã–º—ã–Ω! ü§ñ")
    elif text == '“õ–æ—à –±–æ–ª':
        bot.reply_to(message, "“ö–æ—à –±–æ–ª! –ö–µ–∑–¥–µ—Å–∫–µ–Ω—à–µ! üëã")
    elif text == '“õ–∞–π–¥–∞—Å—ã“£?':
        bot.reply_to(message, "–û—Å—ã–Ω–¥–∞–º—ã–Ω, —Å—ñ–∑–±–µ–Ω –±—ñ—Ä–≥–µ! üåç")
    elif text == '–º–µ–Ω—ñ —Ç–∞–Ω–∏—Å—ã“£ –±–∞?':
        bot.reply_to(message, f"”ò—Ä–∏–Ω–µ, —Å–µ–Ω {message.from_user.first_name}! üòä")
    elif text == '–º–µ–Ω —Å–µ–Ω—ñ –∂–∞“õ—Å—ã –∫”©—Ä–µ–º—ñ–Ω':
        bot.reply_to(message, "–†–∞“õ–º–µ—Ç! –ú–µ–Ω –¥–µ —Å–µ–Ω—ñ –∂–∞“õ—Å—ã –∫”©—Ä–µ–º—ñ–Ω! ‚ù§Ô∏è")
    elif text == '–∞–Ω–µ–∫–¥–æ—Ç –∞–π—Ç—à—ã':
        bot.reply_to(message, "“ö–æ—è–Ω –¥“Ø–∫–µ–Ω–≥–µ –∫—ñ—Ä—ñ–ø: '–°—ñ–∑–¥–µ —Å”ô–±—ñ–∑ –±–∞—Ä –º–∞?' ‚Äì –¥–µ–π–¥—ñ. –î“Ø–∫–µ–Ω—à—ñ: '–ñ–æ“õ'. –ï—Ä—Ç–µ“£—ñ–Ω–¥–µ —Ç–∞“ì—ã –∫–µ–ª–µ–¥—ñ: '–°”ô–±—ñ–∑ –±–∞—Ä –º–∞?'. –î“Ø–∫–µ–Ω—à—ñ: '–ñ–æ“õ'. “Æ—à—ñ–Ω—à—ñ –∫“Ø–Ω—ñ –¥“Ø–∫–µ–Ω—à—ñ —Å”ô–±—ñ–∑ ”ô–∫–µ–ª—ñ–ø “õ–æ—è–¥—ã. “ö–æ—è–Ω —Ç–∞“ì—ã –∫–µ–ª–µ–¥—ñ: '–°—ñ–∑–¥–µ —Å”ô–±—ñ–∑ –±–∞—Ä –º–∞?' ‚Äì '–ò”ô, –±–∞—Ä'. ‚Äì '–§—É—É, –º–∞“ì–∞–Ω –±–æ–ª–º–∞–π–¥—ã –µ–∫–µ–Ω...' üê∞üòÇ")
    elif text == '–∞—É–∞ —Ä–∞–π—ã “õ–∞–Ω–¥–∞–π?':
        bot.reply_to(message, "–û–Ω—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—Ç–µ–Ω “õ–∞—Ä–∞–ø –∫”©—Ä—É–≥–µ –∫–µ“£–µ—Å –±–µ—Ä–µ–º—ñ–Ω! ‚òÄÔ∏èüåßÔ∏è")
    elif text == '–±–æ—Ç—Å—ã“£ –±–∞?':
        bot.reply_to(message, "–ò”ô, –º–µ–Ω –±–æ—Ç–ø—ã–Ω, –±—ñ—Ä–∞“õ –¥–æ—Å—Ç—ã“õ“õ–∞ –¥–∞–π—ã–Ω–º—ã–Ω! ü§ñ")
    else:
        bot.reply_to(message, "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –±“±–ª —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ –¥–∞–π—ã–Ω –µ–º–µ—Å–ø—ñ–Ω. üòä")

if __name__ == '__main__':
    print("Bot activated...")
    bot.infinity_polling()
    